[List.External:Crimson4]
/*
 * crimson4
 * <eric.gragsone@erisresearch.org>
 *
 * This is an external cracking mode for John the Ripper
 * append this to your john.conf file. This cracking mode 
 * tries the most efficient permutations for the first
 * trillion guesses
 *
 * Based on this talk from DerbyCon 3
 * https://www.youtube.com/watch?v=DvP8g-APChc
 *
 * characters (length)          permutations
 * numbers (1-10)               11,111,111,110
 * 18freq lowercase (1-8)       11,668,193,550
 * 18freq uppercase (1-8)       11,668,193,550
 * number (11)                  100,000,000,000
 * 18freq lowercase (9)         198,359,290,368
 * 18freq uppercase (9)         198,359,290,368
 * lowercase (1-8)              205,511,953,608
 * uppercase (1-8)              205,511,953,608
 *
 *                      total   942,189,986,162
 */

/* Global Variables: current length, word, and generator */
int length;
int generator;
int size;

int current[12];
int charset[62];

int base_start[5];
int base_end[5];
int control_start[5];
int control_end[5];

void init() {
        int i;
        int freq[26];

        length=0;
        generator=0;
        size=12;

/* setup alphabet by the english frequency */
/* etaoin shrdlu cmfwyp vbgkjq xz */
        freq[0]='e';
        freq[1]='t';
        freq[2]='a';
        freq[3]='o';
        freq[4]='i';
        freq[5]='n';

        freq[6]='s';
        freq[7]='h';
        freq[8]='r';
        freq[9]='d';
        freq[10]='l';
        freq[11]='u';

        freq[12]='c';
        freq[13]='m';
        freq[14]='f';
        freq[15]='w';
        freq[16]='y';
        freq[17]='p';

        freq[18]='v';
        freq[19]='b';
        freq[20]='g';
        freq[21]='k';
        freq[22]='j';
        freq[23]='q';

        freq[24]='x';
        freq[25]='z';

        i=size;
        while (i--) current[i]=0;

        length=1;
        generator=0;

        /* number generator*/
        base_start[0]=0;
        base_end[0]=9;
        control_start[0]=0;
        control_end[0]=9;

        i=10;
        while (i--) charset[i]=i+'0';

        /* freq18 lowercase generator */
        base_start[1]=10;
        base_end[1]=10+17;
        control_start[1]=10;
        control_end[1]=10+17;

        /* freq18 uppercase generator */
        base_start[2]=36;
        base_end[2]=36+17;
        control_start[2]=36;
        control_end[2]=36+17;

        /* lowercase generator */
        base_start[3]=10;
        base_end[3]=10+25;
        control_start[3]=10+18;
        control_end[3]=10+25;

        /* uppercase generator */
        base_start[4]=36;
        base_end[4]=36+25;
        control_start[4]=36+18;
        control_end[4]=36+25;

        i=26;
        while (i--) {
                charset[10+1]=freq[i];
                charset[36+1]=freq[i]^' ';
        }

        current[0]=base_start[generator];
}

void generate(){
        int i;
        int ready;

        ready=0;

        while(ready == 0) {
                if(current[0] == base_end[generator]) {
                        i=size;
                        while (i--) current[i]=0;

                        if(generator == 0) {
                                if(length < 9) {
                                        length++;
                                } else if(length == 9) {
                                        generator=1;
                                        length=0;
                                } else {
                                        generator=1;
                                        length=8;
                                }
                        } else if(generator == 1) {
                                if(length < 7) {
                                        length++;
                                } else if(length == 7) {
                                        generator=2;
                                        length=0;
                                } else {
                                        generator=2;
                                        length=8;
                                }
                        } else if(generator == 2) {
                                if(length < 7) {
                                        length++;
                                } else if(length == 7) {
                                        generator=0;
                                        length=10;
                                } else {
                                        generator=3;
                                        length=0;
                                }
                        } else if(generator == 3) {
                                if(length < 7) {
                                        length++;
                                } else if(length == 7) {
                                        generator=4;
                                        length=0;
                                }
                        } else {
                                if(length < 7) {
                                        length++;
                                } else {
                                        return;
                                }
                        }

                        i=length-1;
                        while(i--) current[i]=base_start[generator];

                        current[length]=control_start[generator];
                        ready++;
                } else {
                        i=length;

                        while(current[i] == base_end[generator]) {
                                current[i]=base_start[generator];
                                i--;
                        }

                        current[i]=current[i]+1;

                        i=length;

                        while(ready == 0) {
                                if((current[i] >= control_start[generator]) && (current[i] <= control_end[generator])) {
                                        ready++;
                                }

                                i--;
                        }
                }
        }

        i=size;
        while(i--) word[i]=0;

        i=length;
        while(i--) word[i]=charset[current[i]];
}
